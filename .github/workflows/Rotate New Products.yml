name: Rotate "New" Products on Supabase Ecommerce Project

on:
  schedule:
    - cron: '0 9 * * 1' # Runs every Monday at 09:00 UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  rotate-new-products:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Supabase Client
        run: npm install @supabase/supabase-js --force

      - name: Rotate New Products
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_PROJECT_SERVICE_ROLE_KEY }}
        run: |
          node -e "
          (async () => {
            const { createClient } = require('@supabase/supabase-js');
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

            // Step 1: Fetch IDs of products currently marked as new
            const { data: currentNew, error: fetchError } = await supabase
              .from('products')
              .select('id')
              .eq('new', true);
            if (fetchError) throw fetchError;

            const currentNewIds = currentNew.map(p => p.id);

            // Step 2: Fetch 10 new product IDs NOT in the current list
            const { data: candidates, error: selectError } = await supabase
              .from('products')
              .select('id')
              .not('id', 'in', `(${currentNewIds.join(',')})`)
              .limit(10);
            if (selectError) throw selectError;

            const newNewIds = candidates.map(p => p.id);

            // Step 3: Set all products to new = false
            const { error: clearError } = await supabase
              .from('products')
              .update({ new: false })
              .neq('new', false); // only update those that are currently true
            if (clearError) throw clearError;

            // Step 4: Set new = true for the new 10
            if (newNewIds.length > 0) {
              const { error: setError } = await supabase
                .from('products')
                .update({ new: true })
                .in('id', newNewIds);
              if (setError) throw setError;
            }

            console.log(\`Updated \${newNewIds.length} new products: [\${newNewIds.join(', ')}]\`);
          })();
          "
