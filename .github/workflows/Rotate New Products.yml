name: Rotate "New" Products on Supabase Ecommerce Project

on:
  schedule:
    - cron: '0 9 * * 1' # Every Monday at 09:00 UTC
  workflow_dispatch:

jobs:
  rotate-new-products:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Supabase Client
        run: npm install @supabase/supabase-js --force

      - name: Rotate New Products
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_PROJECT_SERVICE_ROLE_KEY }}
        run: |
          node -e "
          (async () => {
            try {
              const { createClient } = require('@supabase/supabase-js');
              const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

              // Step 1: Get current 'new' product IDs
              const { data: currentNew, error: fetchError } = await supabase
                .from('products')
                .select('id')
                .eq('new', true);
              if (fetchError) throw fetchError;

              const currentNewIds = currentNew.map(p => p.id);

              // Step 2: Get 10 products not currently marked as new
              let query = supabase
                .from('products')
                .select('id');

              if (currentNewIds.length > 0) {
                const inClause = `(${currentNewIds.map(id => \`\"\${id}\"\`).join(',')})`;
                query = query.not('id', 'in', inClause);
              }

              const { data: candidates, error: selectError } = await query.limit(10);
              if (selectError) throw selectError;

              const newNewIds = candidates.map(p => p.id);

              // Step 3: Clear all current new flags
              const { error: clearError } = await supabase
                .from('products')
                .update({ new: false })
                .eq('new', true);
              if (clearError) throw clearError;

              // Step 4: Mark 10 new products as new
              if (newNewIds.length > 0) {
                const { error: setError } = await supabase
                  .from('products')
                  .update({ new: true })
                  .in('id', newNewIds);
                if (setError) throw setError;
              }

              console.log(\`Updated \${newNewIds.length} new products: [\${newNewIds.join(', ')}]\`);
            } catch (err) {
              console.error('Error rotating new products:', err);
              process.exit(1);
            }
          })();
          "
