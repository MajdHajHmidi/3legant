name: Update Home View Images Daily

on:
  schedule:
    - cron: '0 9 * * *'  # every day at 09:00 UTC
  workflow_dispatch:

jobs:
  update-home-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Supabase Client
        run: npm install @supabase/supabase-js --force

      - name: Update Home View Images
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_PROJECT_SERVICE_ROLE_KEY }}
        run: |
          node -e '
          (async () => {
            const { createClient } = require("@supabase/supabase-js");
            const supabaseUrl = process.env.SUPABASE_URL;
            const supabaseKey = process.env.SUPABASE_KEY;
            const supabase = createClient(supabaseUrl, supabaseKey);
        
            try {
              const { data: files, error: listError } = await supabase
                .storage
                .from("blogs")
                .list("", { limit: 100 });
            
              if (listError) throw listError;
              if (!files || files.length === 0) throw new Error("No files found in blogs bucket");
            
              function getRandomElements(arr, count) {
                const shuffled = [...arr].sort(() => 0.5 - Math.random());
                return shuffled.slice(0, count);
              }
            
              const selectedFiles = getRandomElements(files, 3);
            
              const imageUrls = selectedFiles.map(f => `${supabaseUrl}/storage/v1/object/public/blogs/${encodeURIComponent(f.name)}`);
            
              const keys = ["home_view_image1", "home_view_image2", "home_view_image3"];
            
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const value = imageUrls[i] || null;
              
                const { error: upsertError } = await supabase
                  .from("app_metadata")
                  .upsert({ key, value }, { onConflict: "key" });
              
                if (upsertError) throw upsertError;
                console.log(`Updated ${key} to ${value}`);
              }
            
              console.log("Home view images updated successfully.");
            } catch (err) {
              console.error("Error updating home view images:", err);
              process.exit(1);
            }
          })();
          '
